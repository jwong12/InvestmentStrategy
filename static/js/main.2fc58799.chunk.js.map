{"version":3,"sources":["logo.svg","components/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["Main","useState","bankroll","setBankroll","profitTarget","setProfitTarget","winPercentage","setWinPercentage","wagerPercentage","setWagerPercentage","title","text","series","name","data","xAxis","yAxis","options","setOptions","isBetWon","winDecimal","Math","random","handleOnChange","event","target","parseInt","value","Number","toFixed","className","type","min","onChange","id","max","disabled","onClick","wagerDecimal","bankrollData","totalBankroll","length","bet","push","highcharts","Highcharts","updateArgs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAAe,I,oDCKA,SAASA,IAAQ,IAAD,EACKC,mBAAS,KADd,mBACpBC,EADoB,KACVC,EADU,OAEaF,mBAAS,KAFtB,mBAEpBG,EAFoB,KAENC,EAFM,OAGeJ,mBAAS,IAHxB,mBAGpBK,EAHoB,KAGLC,EAHK,OAImBN,mBAAS,IAJ5B,mBAIpBO,EAJoB,KAIHC,EAJG,OAKGR,mBAAS,CACnCS,MAAO,CACLC,KAAM,cAERC,OAAQ,CAAC,CACLC,KAAM,aACNC,KAAM,KAEVC,MAAO,CACHL,MAAO,CACHC,KAAM,mBAGdK,MAAO,CACHN,MAAO,CACHC,KAAM,qBApBS,mBAKpBM,EALoB,KAKXC,EALW,KAmD3B,SAASC,EAASC,GAGd,OAFaC,KAAKC,UAENF,EAOhB,SAASG,EAAeC,GACM,aAAtBA,EAAMC,OAAOZ,KACbV,EAAYuB,SAASF,EAAMC,OAAOE,QAEL,WAAtBH,EAAMC,OAAOZ,KACpBR,EAAgBqB,SAASF,EAAMC,OAAOE,QAET,QAAtBH,EAAMC,OAAOZ,OACpBN,EAAiBiB,EAAMC,OAAOE,OAC9BlB,EAAmBmB,QAA+C,KAArCJ,EAAMC,OAAOE,MAAQ,IAAM,EAAK,IAAUE,QAAQ,MAIvF,OACI,gCACI,qDACA,sBAAKC,UAAU,kBAAf,UACI,sBAAKA,UAAU,cAAf,UACI,6CACA,sBAAKA,UAAU,gBAAf,cAAgC,uBAAOjB,KAAK,WAAWkB,KAAK,SAASC,IAAI,IAAIC,SAAUV,EAAgBI,MAAOzB,UAElH,sBAAK4B,UAAU,cAAf,UACI,kDACA,sBAAKA,UAAU,gBAAf,cAAgC,uBAAOjB,KAAK,SAASkB,KAAK,SAASC,IAAI,IAAIC,SAAUV,EAAgBI,MAAOvB,UAEhH,sBAAK0B,UAAU,cAAf,UACI,mDACA,sBAAKA,UAAU,oBAAf,UAAmC,uBAAOjB,KAAK,MAAMqB,GAAG,MAAMF,IAAI,KAAKG,IAAI,MAAMF,SAAUV,EAAgBI,MAAOrB,IAAlH,UAEJ,sBAAKwB,UAAU,cAAf,UACI,qDACA,sBAAKA,UAAU,sBAAf,UAAqC,uBAAOM,UAAQ,EAACT,MAAOnB,IAA5D,UAEJ,qBAAKsB,UAAU,0BAAf,SAAyC,wBAAQO,QArE7D,WAOI,IANA,IAAMjB,EAAad,EAAgB,IAC7BgC,EAAe9B,EAAkB,IAEjC+B,EAAe,GACjBC,EAAgBtC,EAEbsC,EAAgB,GAAMA,EAAgBtC,EAAWE,GAAiBmC,EAAaE,OAAS,OAAO,CAClG,IAAMC,EAAMF,EAAiBF,EAEzBnB,EAASC,GACToB,GAAiBE,EAGjBF,GAAiBE,EAGrBH,EAAaI,KAAKjB,SAASc,EAAcX,QAAQ,KAGrDX,EAAW,CAAEN,OAAQ,CAAC,CAClBC,KAAM,aACNC,KAAMyB,OA+CuC,2BAE7C,qBAAKT,UAAU,aAAf,SACI,cAAC,IAAD,CACIc,WAAYC,IACZ5B,QAASA,EACT6B,WAAY,EAAC,UC7FlBC,MARf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2fc58799.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './Main.scss';\nimport React, { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nexport default function Main() {\n    const [bankroll, setBankroll] = useState(2000);\n    const [profitTarget, setProfitTarget] = useState(1000);\n    const [winPercentage, setWinPercentage] = useState(55);\n    const [wagerPercentage, setWagerPercentage] = useState(20);\n    const [options, setOptions] = useState({\n        title: {\n          text: 'Line Graph'\n        },\n        series: [{\n            name: 'Simulation',\n            data: []\n        }],\n        xAxis: {\n            title: {\n                text: 'Number of Bets'\n            }\n        },\n        yAxis: {\n            title: {\n                text: 'Total Bankroll'\n            }\n        },\n    });\n\n    function simulateData() {\n        const winDecimal = winPercentage / 100;\n        const wagerDecimal = wagerPercentage / 100;\n        \n        const bankrollData = [];\n        let totalBankroll = bankroll;\n\n        while (totalBankroll > 1 && (totalBankroll < bankroll + profitTarget) && bankrollData.length < 10001) {\n            const bet = totalBankroll *  wagerDecimal;\n\n            if (isBetWon(winDecimal)) {\n                totalBankroll += bet;\n\n            } else {\n                totalBankroll -= bet;\n            }\n\n            bankrollData.push(parseInt(totalBankroll.toFixed(2)));\n        }\n\n        setOptions({ series: [{ \n            name: 'Simulation',\n            data: bankrollData\n        }] })\n    }\n\n    function isBetWon(winDecimal) {\n        const rand = Math.random();\n\n        if (rand <= winDecimal) {\n            return true\n        }\n\n        return false;\n    }\n\n    function handleOnChange(event) {\n        if (event.target.name === \"bankroll\") {\n            setBankroll(parseInt(event.target.value));\n\n        } else if (event.target.name === \"profit\") {\n            setProfitTarget(parseInt(event.target.value));\n\n        } else if (event.target.name === \"win\") {\n            setWinPercentage(event.target.value);\n            setWagerPercentage(Number((((event.target.value / 100 * 2) - 1) * 100).toFixed(2)));\n        }\n    }\n\n    return (\n        <div>\n            <h1>Investment Strategy</h1>\n            <div className=\"information-box\">\n                <div className=\"info-detail\">\n                    <label>Bankroll</label>\n                    <div className=\"input-wrapper\">$<input name=\"bankroll\" type=\"number\" min=\"0\" onChange={handleOnChange} value={bankroll}/></div>\n                </div>\n                <div className=\"info-detail\">\n                    <label>Profit Target</label>\n                    <div className=\"input-wrapper\">$<input name=\"profit\" type=\"number\" min=\"0\" onChange={handleOnChange} value={profitTarget}/></div>\n                </div>\n                <div className=\"info-detail\">\n                    <label>Win Percentage</label>\n                    <div className=\"input-wrapper-win\"><input name=\"win\" id=\"win\" min=\"50\" max=\"100\" onChange={handleOnChange} value={winPercentage}/>%</div>\n                </div>\n                <div className=\"info-detail\">\n                    <label>Wager Percentage</label>\n                    <div className=\"input-wrapper-wager\"><input disabled value={wagerPercentage}/>%</div>\n                </div>\n                <div className=\"button-simulate-wrapper\"><button onClick={simulateData}>Simulate</button></div>\n            </div>\n            <div className=\"line-chart\">\n                <HighchartsReact\n                    highcharts={Highcharts}\n                    options={options}\n                    updateArgs={[true]}\n                />\n            </div>\n        </div>\n    );\n}","import logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}